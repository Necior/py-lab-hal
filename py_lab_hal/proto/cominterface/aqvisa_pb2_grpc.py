# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from py_lab_hal.proto.cominterface import aqvisa_pb2 as pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2


class AqVISAStub(object):
  """Missing associated documentation comment in .proto file."""

  def __init__(self, channel):
    """Constructor.

    Args:
        channel: A grpc.Channel.
    """
    self.ViWrite = channel.unary_unary(
        '/aqvisa.AqVISA/ViWrite',
        request_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteRequest.SerializeToString,
        response_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteResponse.FromString,
    )
    self.ViRead = channel.unary_unary(
        '/aqvisa.AqVISA/ViRead',
        request_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadRequest.SerializeToString,
        response_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadResponse.FromString,
    )
    self.ViGetCommandResult = channel.unary_unary(
        '/aqvisa.AqVISA/ViGetCommandResult',
        request_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultRequest.SerializeToString,
        response_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultResponse.FromString,
    )


class AqVISAServicer(object):
  """Missing associated documentation comment in .proto file."""

  def ViWrite(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ViRead(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ViGetCommandResult(self, request, context):
    """Missing associated documentation comment in .proto file."""
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AqVISAServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ViWrite': grpc.unary_unary_rpc_method_handler(
          servicer.ViWrite,
          request_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteRequest.FromString,
          response_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteResponse.SerializeToString,
      ),
      'ViRead': grpc.unary_unary_rpc_method_handler(
          servicer.ViRead,
          request_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadRequest.FromString,
          response_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadResponse.SerializeToString,
      ),
      'ViGetCommandResult': grpc.unary_unary_rpc_method_handler(
          servicer.ViGetCommandResult,
          request_deserializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultRequest.FromString,
          response_serializer=pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'aqvisa.AqVISA', rpc_method_handlers
  )
  server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AqVISA(object):
  """Missing associated documentation comment in .proto file."""

  @staticmethod
  def ViWrite(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        '/aqvisa.AqVISA/ViWrite',
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteRequest.SerializeToString,
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViWriteResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )

  @staticmethod
  def ViRead(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        '/aqvisa.AqVISA/ViRead',
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadRequest.SerializeToString,
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViReadResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )

  @staticmethod
  def ViGetCommandResult(
      request,
      target,
      options=(),
      channel_credentials=None,
      call_credentials=None,
      insecure=False,
      compression=None,
      wait_for_ready=None,
      timeout=None,
      metadata=None,
  ):
    return grpc.experimental.unary_unary(
        request,
        target,
        '/aqvisa.AqVISA/ViGetCommandResult',
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultRequest.SerializeToString,
        pyhal_dot_proto_dot_cominterface_dot_aqvisa__pb2.ViGetCommandResultResponse.FromString,
        options,
        channel_credentials,
        insecure,
        call_credentials,
        compression,
        wait_for_ready,
        timeout,
        metadata,
    )
